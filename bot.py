#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram-–±–æ—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —à–∞–±–ª–æ–Ω (–∑–µ–ª—ë–Ω—ã–π/—Ñ–∏–ª—å—Ç—Ä).
"""

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∫ 0. –ò–ú–ü–û–†–¢–´
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
import io, os, math, random, traceback, warnings, sys, logging
from typing import Dict, Any, List, Tuple, Optional

import numpy as np
import cv2
from PIL import Image, ImageFilter
from dotenv import load_dotenv

os.makedirs("logs", exist_ok=True)

# –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s %(levelname)s %(message)s",
    handlers=[
        logging.FileHandler("logs/bot.log", encoding="utf-8"),
        logging.StreamHandler(sys.stdout)
    ]
)


import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∫ 1. –ù–ê–°–¢–†–û–ô–ö–ê PIL  (–æ—Ç–∫–ª—é—á–∞–µ–º ¬´–±–æ–º–±—É¬ª –Ω–∞ –±–æ–ª—å—à–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Image.MAX_IMAGE_PIXELS = None
warnings.simplefilter('ignore', Image.DecompressionBombWarning)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∫ 2. –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–û–ù–°–¢–ê–ù–¢–´
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
templates_dir      = "templates"               # –ø–∞–ø–∫–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
filter_path        = "filter.png"            # PNG-—Ñ–∏–ª—å—Ç—Ä (—Å —Ç–µ–Ω—å—é 22 px)
OUT_DIM            = 2048                      # –∏—Ç–æ–≥–æ–≤–∞—è –¥–ª–∏–Ω–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
scale_pixels       = 75                       # ¬´–∑–∞–ø–∞—Å¬ª –∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫—É
upscale_factor     = 0.5                       # –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∞–ø—Å–∫–µ–π–ª
SCALE_MONO         = 8                         # –∞–ø—Å–∫–µ–π–ª –º–æ–Ω–æ–ª–∏—Ç–∞
min_shift, max_shift       = 2, 8             # —Å–ª—É—á–∞–π–Ω—ã–π —Å–¥–≤–∏–≥
min_rotation, max_rotation = 1, 3              # —Å–ª—É—á–∞–π–Ω—ã–π —É–≥–æ–ª
thickness, box_blur_radius = 25, 5             # –±–æ–∫—Å-–±–ª—é—Ä –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
MAX_PIXELS_TPL     = 80_000_000                # –ø–æ—Ç–æ–ª–æ–∫ –∞–ø—Å–∫–µ–π–ª–∞ —à–∞–±–ª–æ–Ω–∞
TG_PHOTO_LIMIT     = 10_485_760                # 10 –ú–ë (Telegram)
VALID_IMAGE_EXTENSIONS = (".jpg", ".jpeg", ".png")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∫ 3. –ì–û–¢–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø / –≠–ú–û–î–ó–ò
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
MSG_SELECT_PERSONA   = "üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:"
MSG_SELECT_STAGE     = "üìü –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø"
MSG_SELECT_TEMPLATE  = "üñºÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω"
MSG_SEND_PHOTO       = "üì• –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏"
MSG_PROCESSING       = "‚è≥ –ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞‚Ä¶"
MSG_DONE             = "‚úÖ –ì–æ—Ç–æ–≤–æ!"
BTN_REGENERATE       = "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"
MSG_NO_ACCESS        = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞."
MSG_START_FIRST      = "–°–Ω–∞—á–∞–ª–∞ /start."
MSG_TEMPLATE_NOT_FOUND = "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω."
MSG_ERROR_INTERNAL   = "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏."
MSG_NO_TEMPLATES_FOUND = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–æ—Ä–∞."

# –≠—Ç–æ—Ç —Å–ª–æ–≤–∞—Ä—å —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö –∏–º–µ–Ω —ç—Ç–∞–ø–æ–≤
STAGE_NAME_MAP = {
    "0": "0Ô∏è‚É£ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥)",
    "1": "1Ô∏è‚É£ (—Ä–µ–∑-—Ç –ø–ª–∞—Ç–Ω–æ–π –¥-–∫–∏)",
    "2": "2Ô∏è‚É£ (—Ä–µ–∑-—Ç –ø–æ—Å–ª–µ —Ä–∏—Ç—É–∞–ª–∞)",
    "3": "3Ô∏è‚É£ (—Ä–µ–∑-—Ç –ø–æ—Å–ª–µ —Ä–∏—Ç—É–∞–ª–∞)",
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∫ 4. –ó–ê–ì–†–£–ó–ö–ê ¬´–ë–ï–õ–û–ì–û¬ª –°–ü–ò–°–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (who can use the bot)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def load_allowed_user_ids(fname: str = "allowed_users.txt") -> set[int]:
    """–°—á–∏—Ç—ã–≤–∞–µ—Ç allowed_users.txt ‚Üí –º–Ω–æ–∂–µ—Å—Ç–≤–æ user_id (int)."""
    ids = set()
    if os.path.exists(fname):
        with open(fname, encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith("#"):
                    try:
                        ids.add(int(line))
                    except ValueError:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å User ID: {line} –∏–∑ {fname}")
    logging.info(f"–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: {len(ids)} ID –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")
    return ids


ALLOWED_USER_IDS = load_allowed_user_ids()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∫ 5. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM-–ë–û–¢–ê
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logging.critical("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ! –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.")
    sys.exit(1)

bot = telebot.TeleBot(BOT_TOKEN)

# —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
import telebot.apihelper as tbh

tbh.SEND_FILE_TIMEOUT = 120
tbh.CONNECT_TIMEOUT = 30
tbh.READ_TIMEOUT = 30

logging.info("Bot ready")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∫ 6. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_personas() -> list[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∞–ø–æ–∫ –≤–Ω—É—Ç—Ä–∏ templates/ (–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π)."""
    if not os.path.exists(templates_dir) or not os.path.isdir(templates_dir):
        logging.error(f"–ü–∞–ø–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ '{templates_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return []
    return sorted(
        d for d in os.listdir(templates_dir)
        if os.path.isdir(os.path.join(templates_dir, d))
    )

def get_stages_for_persona(persona: str) -> List[Tuple[str, str]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç—Ç–∞–ø–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
    –≠—Ç–∞–ø—ã - —ç—Ç–æ –ø–æ–¥–ø–∞–ø–∫–∏ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∏–º–µ–Ω–∞–º–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∏–º—è_–ø–∞–ø–∫–∏, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ_–∏–º—è).
    """
    persona_path = os.path.join(templates_dir, persona)
    stages = []
    if os.path.isdir(persona_path):
        for item in os.listdir(persona_path):
            item_path = os.path.join(persona_path, item)
            if os.path.isdir(item_path) and item.isdigit():
                display_name = STAGE_NAME_MAP.get(item, f"–≠—Ç–∞–ø {item}")
                stages.append((item, display_name))
    return sorted(stages, key=lambda x: int(x[0])) # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é

def get_templates_in_path(current_path: str) -> List[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤ (–∫–∞—Ä—Ç–∏–Ω–æ–∫) –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ (–±–µ–∑ –ø—É—Ç–∏, –Ω–æ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º).
    """
    templates = []
    if os.path.isdir(current_path):
        for item in os.listdir(current_path):
            item_path = os.path.join(current_path, item)
            if os.path.isfile(item_path) and item.lower().endswith(VALID_IMAGE_EXTENSIONS):
                templates.append(item)
    return sorted(templates)

def get_template_name_without_extension(filename: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
    return os.path.splitext(filename)[0]

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å) ---
def order_corners(pts: np.ndarray) -> np.ndarray:
    """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ 4 —Ç–æ—á–µ–∫ ‚Üí TL, TR, BR, BL (–¥–ª—è getPerspective)."""
    pts = np.asarray(pts, dtype="float32")
    s = pts.sum(1)
    diff = np.diff(pts, axis=1)
    tl, br = pts[np.argmin(s)], pts[np.argmax(s)]
    tr, bl = pts[np.argmin(diff)], pts[np.argmax(diff)]
    return np.array([tl, tr, br, bl], dtype="float32")

def _save_png(img: Image.Image) -> bytes:
    buf = io.BytesIO()
    img.save(buf, "PNG")
    buf.seek(0)
    return buf.getvalue()

def _save_jpeg(img: Image.Image, q: int = 95) -> bytes:
    buf = io.BytesIO()
    img.convert("RGB").save(buf, "JPEG", quality=q)
    buf.seek(0)
    return buf.getvalue()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∫ 7. –û–°–ù–û–í–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def process_template_photo(tpl_img: Image.Image, user_img: Image.Image) -> bytes:
    """
    –í—Å—Ç–∞–≤–ª—è–µ—Ç user_img –≤ –∑–µ–ª—ë–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ tpl_img –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç bytes.
    –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤–Ω—É—Ç—Ä–∏.
    """
    # 7.1 --- –ê–ü–°–ö–ï–ô–õ –®–ê–ë–õ–û–ù–ê –î–û OUT_DIM (–Ω–æ –Ω–µ –±–æ–ª–µ–µ 80 –ú–ø)
    out_scale = OUT_DIM / max(tpl_img.size) if max(tpl_img.size) < OUT_DIM else 1.0
    tpl_big = tpl_img.resize(
        (int(tpl_img.width * out_scale), int(tpl_img.height * out_scale)),
        Image.LANCZOS
    )
    # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 80 –ú–ø (RAM-safety)
    if tpl_big.width * tpl_big.height > MAX_PIXELS_TPL:
        factor = math.sqrt(MAX_PIXELS_TPL / (tpl_big.width * tpl_big.height))
        tpl_big = tpl_big.resize(
            (int(tpl_big.width * factor), int(tpl_big.height * factor)),
            Image.LANCZOS
        )
        out_scale *= factor

    tpl_rgba = tpl_big.convert("RGBA")

    # 7.2 --- –ü–û–ò–°–ö –ó–ï–õ–Å–ù–û–ô –û–ë–õ–ê–°–¢–ò
    b, g, r, _ = np.asarray(tpl_rgba).transpose(2, 0, 1)
    mask = ((g > 200) & (r < 100) & (b < 100)).astype(np.uint8) * 255

    cnts, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    if not cnts:
        return _save_png(tpl_rgba)  # –∑–µ–ª—ë–Ω–æ–≥–æ –Ω–µ—Ç ‚Üí –æ—Ç–¥–∞—ë–º —à–∞–±–ª–æ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    cnt = max(cnts, key=cv2.contourArea)

    # 7.3 --- –ü–†–û–í–ï–†–ö–ê: 4-—É–≥–æ–ª—å–Ω–∏–∫ –∏–ª–∏ –Ω–µ—Ç
    peri = cv2.arcLength(cnt, True)
    approx = cv2.approxPolyDP(cnt, 0.02 * peri, True)
    persp = len(approx) == 4  # True ‚Üí –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞

    if persp:
        # ‚Ä¢ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 4 —Ç–æ—á–µ–∫ + ¬´–∑–∞–ø–∞—Å¬ª
        quad = order_corners([p[0] for p in approx])
        center = quad.mean(0, keepdims=True)
        vecs = quad - center
        lens = np.linalg.norm(vecs, 1, keepdims=True)
        quad = quad + vecs / (lens + 1e-6) * scale_pixels * out_scale

        # —Ä–∞–∑–º–µ—Ä—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        wA, hA = np.linalg.norm(quad[0] - quad[1]), np.linalg.norm(quad[0] - quad[3])
        wB, hB = np.linalg.norm(quad[2] - quad[3]), np.linalg.norm(quad[1] - quad[2])
        long_side, short_side = int(max(hA, hB)), int(max(wA, wB))
    else:
        # fallback: minAreaRect
        (cx0, cy0), (w0, h0), ang = cv2.minAreaRect(cnt)
        long_side, short_side = int(max(w0, h0)), int(min(w0, h0))

    # 7.4 --- –°–û–ó–î–ê–Å–ú ¬´–ú–û–ù–û–õ–ò–¢¬ª (—Ñ–æ—Ç–æ + —Ñ–∏–ª—å—Ç—Ä) –° –ù–£–ñ–ù–´–ú–ò –†–ê–ó–ú–ï–†–ê–ú–ò
    H = int((long_side + scale_pixels * out_scale) * upscale_factor) * SCALE_MONO
    W = int((short_side + scale_pixels * out_scale) * upscale_factor) * SCALE_MONO

    # ‚ñ∫ 7.4.1 —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äì –º–∞—Å—à—Ç–∞–± ¬´–ø–æ –¥–ª–∏–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ¬ª + —Ü–µ–Ω—Ç—Ä-–æ–±—Ä–µ–∑–∫–∞
    usr_big = user_img.convert("RGBA").resize(
        (int(user_img.width * upscale_factor * SCALE_MONO),
         int(user_img.height * upscale_factor * SCALE_MONO)),
        Image.LANCZOS
    )
    # –±–µ—Ä—ë–º –±–æ–ª—å—à–µ–µ –∏–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ ‚Üí –∑–∞–ø–æ–ª–Ω—è–µ–º –≤—Å—é –æ–±–ª–∞—Å—Ç—å
    sc_fill = max(W / usr_big.width, H / usr_big.height)
    usr_fill = usr_big.resize(
        (int(usr_big.width * sc_fill), int(usr_big.height * sc_fill)),
        Image.BICUBIC if sc_fill > 1 else Image.LANCZOS
    )
    lft = (usr_fill.width - W) // 2
    top = (usr_fill.height - H) // 2
    cropped = usr_fill.crop((lft, top, lft + W, top + H))

    # ‚ñ∫ 7.4.2 PNG-—Ñ–∏–ª—å—Ç—Ä —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π —Ç–µ–Ω—å—é 22 px
    if not os.path.exists(filter_path):
        logging.error(f"–§–∞–π–ª —Ñ–∏–ª—å—Ç—Ä–∞ {filter_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        # –ú–æ–∂–Ω–æ –ª–∏–±–æ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É, –ª–∏–±–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –ø—Ä–æ–¥–æ–ª–∂–∏–º –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞, –Ω–æ –∑–∞–ª–æ–≥–∏—Ä—É–µ–º
        mono = cropped # –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞
    else:
        filt = Image.open(filter_path).convert("RGBA").resize((W, H), Image.LANCZOS)
        # ‚ñ∫ 7.4.3 –∫–æ–º–ø–æ–∑–∏–º —Ñ–æ—Ç–æ + —Ñ–∏–ª—å—Ç—Ä
        mono = Image.new("RGBA", filt.size, (0, 0, 0, 0))
        mono.paste(cropped, (0, 0)) # –£–±—Ä–∞–ª–∏ cropped –∏–∑ paste, —Ç.–∫. –æ–Ω —É–∂–µ RGBA
        mono = Image.alpha_composite(mono, filt)


    # ‚ñ∫ 7.4.4 –Ω–µ–±–æ–ª—å—à–æ–π —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç ¬´–º–æ–Ω–æ–ª–∏—Ç–∞¬ª
    mono = mono.rotate(
        random.choice([-1, 1]) * random.uniform(min_rotation, max_rotation),
        expand=True,
        resample=Image.BICUBIC
    )

    # –ø–æ—Å–ª–µ –≤—Ä–∞—â–µ–Ω–∏—è —É–º–µ–Ω—å—à–∞–µ–º –¥–æ ¬´–æ–±—ã—á–Ω–æ–≥–æ¬ª –º–∞—Å—à—Ç–∞–±–∞
    mono = mono.resize((mono.width // SCALE_MONO, mono.height // SCALE_MONO), Image.LANCZOS)

    # —Å–ª—É—á–∞–π–Ω—ã–π —Å–¥–≤–∏–≥ +/- dx,dy
    dx = random.choice([-1, 1]) * random.randint(min_shift, max_shift)
    dy = random.choice([-1, 1]) * random.randint(min_shift, max_shift)

    # 7.5 --- –í–°–¢–ê–í–ö–ê ¬´–ú–û–ù–û–õ–ò–¢–ê¬ª –í –®–ê–ë–õ–û–ù
    if persp:
        # ‚ñ∫ –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ (4 —Ç–æ—á–∫–∏)
        src = np.array(
            [
                [0, 0],
                [W // SCALE_MONO, 0],
                [W // SCALE_MONO, (H + 30) // SCALE_MONO], # +30 –±—ã–ª–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                [0, (H + 30) // SCALE_MONO],
            ],
            dtype="float32",
        )
        quad_shift = quad + np.array([dx, dy], dtype="float32")
        M = cv2.getPerspectiveTransform(src, quad_shift)

        canvas_bgr = cv2.cvtColor(np.asarray(tpl_rgba), cv2.COLOR_RGBA2BGRA)
        mono_bgr = cv2.cvtColor(np.asarray(mono), cv2.COLOR_RGBA2BGRA)

        warp = cv2.warpPerspective(
            mono_bgr,
            M,
            dsize=tpl_rgba.size, # dsize –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å (width, height)
            flags=cv2.INTER_LANCZOS4,
            borderMode=cv2.BORDER_CONSTANT,
            borderValue=(0, 0, 0, 0),
        )

        alpha = warp[:, :, 3:4] / 255.0
        canvas_bgr[:, :, :3] = canvas_bgr[:, :, :3] * (1 - alpha) + warp[:, :, :3] * alpha
        res = Image.fromarray(cv2.cvtColor(canvas_bgr, cv2.COLOR_BGRA2RGBA), "RGBA")
    else:
        # ‚ñ∫ minAreaRect (–ø–æ—á—Ç–∏ –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ, –Ω–æ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º dx/dy)
        (cx, cy), (w_rect, h_rect), ang_rect = cv2.minAreaRect(cnt) # –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª w0, h0, ang
        
        effective_angle = ang_rect
        if w_rect < h_rect: 
             mono_rot = mono.rotate(-effective_angle, expand=True, resample=Image.BICUBIC)
        else: 
             mono_rot = mono.rotate(-effective_angle - 90, expand=True, resample=Image.BICUBIC)

        layer = Image.new("RGBA", tpl_rgba.size, (0, 0, 0, 0))
        paste_x = int(cx + dx - mono_rot.width / 2)
        paste_y = int(cy + dy - mono_rot.height / 2)
        layer.paste(mono_rot, (paste_x, paste_y), mono_rot)
        res = Image.alpha_composite(tpl_rgba, layer)

    # 7.6 --- –†–ê–ó–ú–´–¢–ò–ï –õ–ï–í–û–ô –ö–†–û–ú–ö–ò
    if thickness > 0 and box_blur_radius > 0: 
        if res.width >= thickness : 
            strip = res.crop((0, 0, thickness, res.height))
            res.paste(strip.filter(ImageFilter.BoxBlur(box_blur_radius)), (0, 0))
        else:
            logging.warning("–¢–æ–ª—â–∏–Ω–∞ –¥–ª—è —Ä–∞–∑–º—ã—Ç–∏—è –±–æ–ª—å—à–µ —à–∏—Ä–∏–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ä–∞–∑–º—ã—Ç–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")


    # 7.7 --- –ü–ê–ö–û–í–ö–ê (PNG ‚â§10 –ú–ë, –∏–Ω–∞—á–µ JPEG —Å –ø–æ–¥–±–æ—Ä–æ–º –∫–∞—á–µ—Å—Ç–≤–∞)
    png_bytes = _save_png(res)
    if len(png_bytes) <= TG_PHOTO_LIMIT:
        return png_bytes

    for q in (95, 90, 85, 80, 75, 70, 65):
        jpg_bytes = _save_jpeg(res, q)
        if len(jpg_bytes) <= TG_PHOTO_LIMIT:
            return jpg_bytes
    return _save_jpeg(res, 50)  # fallback


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∫ 8. –•–†–ê–ù–ò–õ–ò–©–ï –°–û–°–¢–û–Ø–ù–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (chat_id ‚Üí dict)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
user_state: Dict[int, Dict[str, Any]] = {}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∫ 9. –•–ï–ù–î–õ–ï–†–´ –ë–û–¢–ê
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def common_access_check(user_id: int, chat_id: int) -> bool:
    """–û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤."""
    if user_id not in ALLOWED_USER_IDS:
        bot.send_message(chat_id, MSG_NO_ACCESS)
        return False
    return True

def common_access_check_callback(call) -> bool:
    """–û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è callback —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤."""
    if call.from_user.id not in ALLOWED_USER_IDS:
        bot.answer_callback_query(call.id, MSG_NO_ACCESS, show_alert=True)
        return False
    return True

def get_display_template_name(tpl_file_name: str, persona_name_str: str) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —à–∞–±–ª–æ–Ω–∞, —É–¥–∞–ª—è—è –ø—Ä–µ—Ñ–∏–∫—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
    base_name = get_template_name_without_extension(tpl_file_name)
    prefix_to_remove = f"{persona_name_str}_"
    display_name = base_name
    if base_name.startswith(prefix_to_remove):
        display_name = base_name[len(prefix_to_remove):]
    return display_name.capitalize()


@bot.callback_query_handler(func=lambda c: c.data == "start_over") 
def cb_start_again(call) -> None:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ –∫–Ω–æ–ø–∫–µ ‚Äî –∞–Ω–∞–ª–æ–≥ /start."""
    if not common_access_check_callback(call):
        return
    bot.answer_callback_query(call.id)
    cmd_start(call.message, from_callback=True)


@bot.message_handler(commands=["start"])
def cmd_start(msg: Message, from_callback: bool = False) -> None:
    """–°—Ç–∞—Ä—Ç: –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
    if not from_callback and not common_access_check(msg.from_user.id, msg.chat.id):
        return

    chat_id = msg.chat.id
    user_state[chat_id] = {} 

    personas = get_personas()
    if not personas:
        bot.send_message(chat_id, "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return

    kb = InlineKeyboardMarkup()
    for p_name in personas:
        kb.add(InlineKeyboardButton(p_name, callback_data=f"persona_{p_name}"))
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –æ—Ç callback (—Ç.–µ. —ç—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫), —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
    if from_callback:
        try:
            bot.edit_message_text(MSG_SELECT_PERSONA, chat_id, msg.message_id, reply_markup=kb)
        except Exception as e: # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")
            bot.send_message(chat_id, MSG_SELECT_PERSONA, reply_markup=kb)
    else: # –ò–Ω–∞—á–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(chat_id, MSG_SELECT_PERSONA, reply_markup=kb)


@bot.callback_query_handler(func=lambda c: c.data.startswith("persona_"))
def cb_persona(call) -> None:
    """–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
    if not common_access_check_callback(call):
        return

    chat_id = call.message.chat.id
    persona_name = call.data.split("_", 1)[1]
    user_state[chat_id] = {"persona": persona_name} 

    bot.answer_callback_query(call.id) 

    persona_path = os.path.join(templates_dir, persona_name)
    stages = get_stages_for_persona(persona_name)

    if stages:
        kb = InlineKeyboardMarkup()
        for stage_val, stage_label in stages:
            kb.add(InlineKeyboardButton(stage_label, callback_data=f"stage_{stage_val}"))
        user_state[chat_id]["state"] = "choosing_stage"
        bot.edit_message_text(MSG_SELECT_STAGE, chat_id, call.message.message_id, reply_markup=kb)
    else:
        templates_list = get_templates_in_path(persona_path)
        if len(templates_list) == 1:
            user_state[chat_id]["template_file"] = os.path.join(persona_name, templates_list[0])
            user_state[chat_id]["state"] = "waiting_photo"
            bot.edit_message_text(MSG_SEND_PHOTO, chat_id, call.message.message_id)
        elif len(templates_list) > 1:
            kb = InlineKeyboardMarkup()
            for tpl_file in templates_list:
                ### –ò–ó–ú–ï–ù–ï–ù–ò–ï ###
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–Ω–æ–ø–∫–∏
                button_label = get_display_template_name(tpl_file, persona_name)
                kb.add(InlineKeyboardButton(button_label, callback_data=f"template_{persona_name}/{tpl_file}"))
            user_state[chat_id]["state"] = "choosing_template"
            bot.edit_message_text(MSG_SELECT_TEMPLATE, chat_id, call.message.message_id, reply_markup=kb)
        else:
            bot.edit_message_text(MSG_NO_TEMPLATES_FOUND, chat_id, call.message.message_id)
            logging.warning(f"–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –≤ {persona_path} –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {persona_name}")


@bot.callback_query_handler(func=lambda c: c.data.startswith("stage_"))
def cb_stage(call) -> None:
    """–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —ç—Ç–∞–ø–∞."""
    if not common_access_check_callback(call):
        return

    chat_id = call.message.chat.id
    stage_val = call.data.split("_", 1)[1]

    if "persona" not in user_state.get(chat_id, {}):
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start", show_alert=True)
        cmd_start(call.message, from_callback=True) 
        return

    user_state[chat_id]["stage"] = stage_val
    bot.answer_callback_query(call.id)

    persona_name = user_state[chat_id]["persona"]
    current_path = os.path.join(templates_dir, persona_name, stage_val)
    templates_list = get_templates_in_path(current_path)

    if len(templates_list) == 1:
        user_state[chat_id]["template_file"] = os.path.join(persona_name, stage_val, templates_list[0])
        user_state[chat_id]["state"] = "waiting_photo"
        bot.edit_message_text(MSG_SEND_PHOTO, chat_id, call.message.message_id)
    elif len(templates_list) > 1:
        kb = InlineKeyboardMarkup()
        for tpl_file in templates_list:
            ### –ò–ó–ú–ï–ù–ï–ù–ò–ï ###
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–Ω–æ–ø–∫–∏
            button_label = get_display_template_name(tpl_file, persona_name)
            kb.add(InlineKeyboardButton(button_label, callback_data=f"template_{persona_name}/{stage_val}/{tpl_file}"))
        user_state[chat_id]["state"] = "choosing_template"
        bot.edit_message_text(MSG_SELECT_TEMPLATE, chat_id, call.message.message_id, reply_markup=kb)
    else:
        bot.edit_message_text(MSG_NO_TEMPLATES_FOUND, chat_id, call.message.message_id)
        logging.warning(f"–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –≤ {current_path} –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {persona_name}, —ç—Ç–∞–ø {stage_val}")


@bot.callback_query_handler(func=lambda c: c.data.startswith("template_"))
def cb_template_selection(call) -> None:
    """–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ (–µ—Å–ª–∏ –∏—Ö –±—ã–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ)."""
    if not common_access_check_callback(call):
        return

    chat_id = call.message.chat.id
    template_relative_path = call.data.split("_", 1)[1]
    
    if "persona" not in user_state.get(chat_id, {}):
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start", show_alert=True)
        cmd_start(call.message, from_callback=True) 
        return

    user_state[chat_id]["template_file"] = template_relative_path
    user_state[chat_id]["state"] = "waiting_photo"
    bot.answer_callback_query(call.id)
    bot.edit_message_text(MSG_SEND_PHOTO, chat_id, call.message.message_id)


@bot.message_handler(content_types=["photo", "document"])
def handle_media(msg: Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç-–∫–∞—Ä—Ç–∏–Ω–∫—É)."""
    chat_id = msg.chat.id
    if not common_access_check(msg.from_user.id, chat_id):
        return

    current_user_state = user_state.get(chat_id, {})
    if current_user_state.get("state") != "waiting_photo":
        bot.send_message(chat_id, MSG_START_FIRST)
        return

    if "template_file" not in current_user_state:
        logging.error(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ waiting_photo, –Ω–æ template_file –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        bot.send_message(chat_id, MSG_ERROR_INTERNAL + " (template_file is missing)")
        cmd_start(msg) 
        return

    try:
        relative_tpl_path = current_user_state["template_file"]
        tpl_path = os.path.join(templates_dir, relative_tpl_path)

        if not os.path.exists(tpl_path):
            bot.send_message(chat_id, MSG_TEMPLATE_NOT_FOUND)
            logging.warning(f"–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ | chat={chat_id} path={tpl_path}")
            user_state[chat_id] = {}
            cmd_start(msg)
            return

        logging.debug(f"–®–∞–±–ª–æ–Ω –≤—ã–±—Ä–∞–Ω | chat={chat_id} path={tpl_path}")

        if msg.content_type == "photo":
            file_id = msg.photo[-1].file_id
        elif msg.document and msg.document.mime_type and msg.document.mime_type.startswith("image/"): # –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ msg.document
            file_id = msg.document.file_id
        else:
            bot.reply_to(msg, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç-–∫–∞—Ä—Ç–∏–Ω–∫—É.")
            return
            
        file_info = bot.get_file(file_id)
        downloaded_file_bytes = bot.download_file(file_info.file_path)
        user_img = Image.open(io.BytesIO(downloaded_file_bytes))

        logging.debug(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–æ | chat={chat_id} size={user_img.size}")

        processing_msg = bot.send_message(chat_id, MSG_PROCESSING)

        template_img = Image.open(tpl_path)
        result_bytes = process_template_photo(template_img, user_img)
        template_img.close()
        user_img.close()


        logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ | chat={chat_id} result_size={len(result_bytes)} bytes")

        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton(BTN_REGENERATE, callback_data="start_over"))

        try:
            bot.delete_message(chat_id, processing_msg.message_id)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

        if len(result_bytes) <= TG_PHOTO_LIMIT:
            bot.send_photo(chat_id, result_bytes, caption=MSG_DONE, reply_markup=kb)
        else:
            output_filename = "result.jpg" 
            if result_bytes.startswith(b'\x89PNG\r\n\x1a\n'): 
                 output_filename = "result.png"
            bot.send_document(chat_id, (output_filename, result_bytes),
                              caption=MSG_DONE, reply_markup=kb)

        user_state[chat_id] = {"persona": current_user_state.get("persona")} 

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞ | chat={chat_id}")
        bot.send_message(chat_id, MSG_ERROR_INTERNAL)
        kb_error = InlineKeyboardMarkup()
        kb_error.add(InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_over"))
        bot.send_message(chat_id, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=kb_error)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∫ 10. –¢–û–ß–ö–ê –í–•–û–î–ê
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    if not BOT_TOKEN:
        print("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        try:
            bot.remove_webhook()
            bot.infinity_polling(skip_pending=True) 
        except Exception as e:
            logging.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞")
            sys.exit(1)
