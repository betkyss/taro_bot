#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram-–±–æ—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ù–ï–°–ö–û–õ–¨–ö–ò–• —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —à–∞–±–ª–æ–Ω.
"""

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∫ 0. –ò–ú–ü–û–†–¢–´
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
import io, os, math, random, traceback, warnings, sys, logging, time, re
from typing import Dict, Any, List, Tuple, Optional

import requests

import numpy as np
import cv2
from PIL import Image, ImageFilter
from dotenv import load_dotenv

os.makedirs("logs", exist_ok=True)

# –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s %(levelname)s %(message)s",
    handlers=[
        logging.FileHandler("logs/bot.log", encoding="utf-8"),
        logging.StreamHandler(sys.stdout),
    ],
)


import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∫ 1. –ù–ê–°–¢–†–û–ô–ö–ê PIL
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Image.MAX_IMAGE_PIXELS = None
warnings.simplefilter("ignore", Image.DecompressionBombWarning)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∫ 2. –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–û–ù–°–¢–ê–ù–¢–´
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
templates_dir = "templates"
filter_path = "filter.png"
OUT_DIM = 2048
scale_pixels = 75
upscale_factor = 0.5
SCALE_MONO = 8
min_shift, max_shift = 2, 8
min_rotation, max_rotation = 1, 3
thickness, box_blur_radius = 25, 5
MAX_PIXELS_TPL = 80_000_000
TG_PHOTO_LIMIT = 10_485_760
SEND_RETRIES = 3
VALID_IMAGE_EXTENSIONS = (".jpg", ".jpeg", ".png")
MIN_CONTOUR_AREA = 1000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –∑–µ–ª–µ–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É—á–µ—Ç–∞

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∫ 3. –ì–û–¢–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø / –≠–ú–û–î–ó–ò
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
MSG_SELECT_PERSONA = "üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:"
MSG_SELECT_STAGE = "üìü –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø"
MSG_SELECT_TEMPLATE = "üñºÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω"
MSG_SELECT_VARIANT = "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç"
MSG_SEND_PHOTO = "üì• –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ {current_num} –∏–∑ {total_num}"  # –ò–ó–ú–ï–ù–ï–ù–û
MSG_PROCESSING = "‚è≥ –ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞‚Ä¶"
MSG_DONE = "‚úÖ –ì–æ—Ç–æ–≤–æ!"
BTN_REGENERATE = "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"
MSG_NO_ACCESS = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞."
MSG_START_FIRST = "–°–Ω–∞—á–∞–ª–∞ /start."
MSG_TEMPLATE_NOT_FOUND = "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω."
MSG_ERROR_INTERNAL = "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏."
MSG_NO_TEMPLATES_FOUND = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–æ—Ä–∞."

STAGE_NAME_MAP = {
    "0": "0Ô∏è‚É£ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥)",
    "1": "1Ô∏è‚É£ (—Ä–µ–∑-—Ç –ø–ª–∞—Ç–Ω–æ–π –¥-–∫–∏)",
    "2": "2Ô∏è‚É£ (—Ä–µ–∑-—Ç –ø–æ—Å–ª–µ —Ä–∏—Ç—É–∞–ª–∞)",
    "3": "3Ô∏è‚É£ (—Ä–µ–∑-—Ç –ø–æ—Å–ª–µ —Ä–∏—Ç—É–∞–ª–∞)",
}


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∫ 4. –ó–ê–ì–†–£–ó–ö–ê ¬´–ë–ï–õ–û–ì–û¬ª –°–ü–ò–°–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def load_allowed_user_ids(fname: str = "allowed_users.txt") -> set[int]:
    ids = set()
    if os.path.exists(fname):
        with open(fname, encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith("#"):
                    try:
                        ids.add(int(line))
                    except ValueError:
                        logging.warning(
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å User ID: {line} –∏–∑ {fname}"
                        )
    logging.info(f"–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: {len(ids)} ID –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")
    return ids


ALLOWED_USER_IDS = load_allowed_user_ids()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∫ 5. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM-–ë–û–¢–ê
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logging.critical("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ! –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.")
    sys.exit(1)

bot = telebot.TeleBot(BOT_TOKEN)

import telebot.apihelper as tbh

tbh.SEND_FILE_TIMEOUT = 120
tbh.CONNECT_TIMEOUT = 30
tbh.READ_TIMEOUT = 120
logging.info("Bot ready")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∫ 6. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_personas() -> list[str]:
    if not os.path.exists(templates_dir) or not os.path.isdir(templates_dir):
        logging.error(f"–ü–∞–ø–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ '{templates_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return []
    return sorted(
        d
        for d in os.listdir(templates_dir)
        if os.path.isdir(os.path.join(templates_dir, d))
    )


def get_stages_for_persona(persona: str) -> List[Tuple[str, str]]:
    persona_path = os.path.join(templates_dir, persona)
    stages = []
    if os.path.isdir(persona_path):
        for item in os.listdir(persona_path):
            item_path = os.path.join(persona_path, item)
            if os.path.isdir(item_path) and item.isdigit():
                display_name = STAGE_NAME_MAP.get(item, f"–≠—Ç–∞–ø {item}")
                stages.append((item, display_name))
    return sorted(stages, key=lambda x: int(x[0]))


def get_templates_in_path(current_path: str) -> List[str]:
    templates = []
    if os.path.isdir(current_path):
        for item in os.listdir(current_path):
            item_path = os.path.join(current_path, item)
            if os.path.isfile(item_path) and item.lower().endswith(
                VALID_IMAGE_EXTENSIONS
            ):
                templates.append(item)
    return sorted(templates)


def group_templates_by_basename(current_path: str) -> Dict[str, Dict[int, str]]:
    """\
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≥—Ä—É–ø–ø —à–∞–±–ª–æ–Ω–æ–≤ –≤–∏–¥–∞ {basename: {number: filename}}.

    basename -- –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ _1/_2 –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è. number -- 1, 2, ...
    """
    groups: Dict[str, Dict[int, str]] = {}
    for fname in get_templates_in_path(current_path):
        base = get_template_name_without_extension(fname)
        if base.endswith("_1") or base.endswith("_2"):
            key = base[:-2]
            try:
                num = int(base[-1])
            except ValueError:
                num = 1
        else:
            key = base
            num = 1
        groups.setdefault(key, {})[num] = fname
    return groups


def get_template_name_without_extension(filename: str) -> str:
    return os.path.splitext(filename)[0]


def order_corners(pts: np.ndarray) -> np.ndarray:
    pts = np.asarray(pts, dtype="float32")
    s = pts.sum(1)
    diff = np.diff(pts, axis=1)
    tl, br = pts[np.argmin(s)], pts[np.argmax(s)]
    tr, bl = pts[np.argmin(diff)], pts[np.argmax(diff)]
    return np.array([tl, tr, br, bl], dtype="float32")


def _save_png(img: Image.Image) -> bytes:
    buf = io.BytesIO()
    img.save(buf, "PNG")
    buf.seek(0)
    return buf.getvalue()


def _save_jpeg(img: Image.Image, q: int = 95) -> bytes:
    buf = io.BytesIO()
    img.convert("RGB").save(buf, "JPEG", quality=q)
    buf.seek(0)
    return buf.getvalue()


def _safe_send(func, *args, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ."""
    for attempt in range(1, SEND_RETRIES + 1):
        try:
            return func(*args, **kwargs)
        except requests.exceptions.ReadTimeout:
            logging.warning(f"Timeout –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{SEND_RETRIES})")
            if attempt == SEND_RETRIES:
                raise
            time.sleep(2)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∫ 7. –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –ê–ù–ê–õ–ò–ó–ê –ò –û–ë–†–ê–ë–û–¢–ö–ò
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def find_and_sort_green_areas(tpl_img: Image.Image) -> List[np.ndarray]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∑–µ–ª–µ–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –≤ —à–∞–±–ª–æ–Ω–µ, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ
    –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ –ø–æ X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ —Ü–µ–Ω—Ç—Ä–∞.
    """
    tpl_rgba = tpl_img.convert("RGBA")
    b, g, r, _ = np.asarray(tpl_rgba).transpose(2, 0, 1)
    mask = ((g > 200) & (r < 100) & (b < 100)).astype(np.uint8) * 255

    cnts, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–Ω—Ç—É—Ä—ã –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∏
    significant_contours = [
        cnt for cnt in cnts if cv2.contourArea(cnt) > MIN_CONTOUR_AREA
    ]

    if not significant_contours:
        return []

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç—É—Ä—ã –ø–æ X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ –∏—Ö –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–µ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
    sorted_contours = sorted(significant_contours, key=lambda c: cv2.boundingRect(c)[0])

    return sorted_contours


def process_template_with_multiple_photos(
    tpl_img: Image.Image, user_imgs: List[Image.Image]
) -> bytes:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: –Ω–∞—Ö–æ–¥–∏—Ç –∑–µ–ª–µ–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏, —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö
    –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –≤ –Ω–∏—Ö —Ñ–æ—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ user_imgs.
    """
    # 7.1 --- –ê–ü–°–ö–ï–ô–õ –®–ê–ë–õ–û–ù–ê
    out_scale = OUT_DIM / max(tpl_img.size) if max(tpl_img.size) < OUT_DIM else 1.0
    tpl_big = tpl_img.resize(
        (int(tpl_img.width * out_scale), int(tpl_img.height * out_scale)), Image.LANCZOS
    )
    if tpl_big.width * tpl_big.height > MAX_PIXELS_TPL:
        factor = math.sqrt(MAX_PIXELS_TPL / (tpl_big.width * tpl_big.height))
        tpl_big = tpl_big.resize(
            (int(tpl_big.width * factor), int(tpl_big.height * factor)), Image.LANCZOS
        )
        out_scale *= factor

    res = tpl_big.convert("RGBA")

    # 7.2 --- –ü–û–ò–°–ö –ò –°–û–†–¢–ò–†–û–í–ö–ê –ó–ï–õ–ï–ù–´–• –û–ë–õ–ê–°–¢–ï–ô
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π, –Ω–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞
    sorted_contours = find_and_sort_green_areas(tpl_img)

    if not sorted_contours:
        return _save_png(res)

    # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç—É—Ä–∞–º –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ
    # min(len(..)) –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –ø—Ä–∏—Å–ª–∞–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º –Ω–∞–¥–æ
    for i in range(min(len(sorted_contours), len(user_imgs))):
        cnt = sorted_contours[i]
        user_img = user_imgs[i]

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–Ω—Ç—É—Ä –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∞–ø—Å–∫–µ–π–ª–æ–º —à–∞–±–ª–æ–Ω–∞
        scaled_cnt = (cnt * out_scale).astype(np.int32)

        # 7.3 --- –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        (cx, cy), (w_rect, h_rect), ang_rect = cv2.minAreaRect(scaled_cnt)
        long_side, short_side = int(max(w_rect, h_rect)), int(min(w_rect, h_rect))

        if long_side == 0 or short_side == 0:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ä–æ–∂–¥–µ–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏

        # 7.4 --- –°–û–ó–î–ê–ï–ú ¬´–ú–û–ù–û–õ–ò–¢¬ª
        H = int((long_side + scale_pixels * out_scale) * upscale_factor) * SCALE_MONO
        W = int((short_side + scale_pixels * out_scale) * upscale_factor) * SCALE_MONO
        if W == 0 or H == 0:
            continue

        usr_big = user_img.convert("RGBA").resize(
            (
                int(user_img.width * upscale_factor * SCALE_MONO),
                int(user_img.height * upscale_factor * SCALE_MONO),
            ),
            Image.LANCZOS,
        )
        sc_fill = max(W / usr_big.width, H / usr_big.height)
        usr_fill = usr_big.resize(
            (int(usr_big.width * sc_fill), int(usr_big.height * sc_fill)),
            Image.BICUBIC if sc_fill > 1 else Image.LANCZOS,
        )
        lft, top = (usr_fill.width - W) // 2, (usr_fill.height - H) // 2
        cropped = usr_fill.crop((lft, top, lft + W, top + H))

        mono = cropped  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–µ—Ç
        if os.path.exists(filter_path):
            filt = Image.open(filter_path).convert("RGBA").resize((W, H), Image.LANCZOS)
            mono = Image.new("RGBA", filt.size, (0, 0, 0, 0))
            mono.paste(cropped, (0, 0))
            mono = Image.alpha_composite(mono, filt)

        mono = mono.rotate(
            random.choice([-1, 1]) * random.uniform(min_rotation, max_rotation),
            expand=True,
            resample=Image.BICUBIC,
        )
        mono = mono.resize(
            (mono.width // SCALE_MONO, mono.height // SCALE_MONO), Image.LANCZOS
        )
        dx, dy = random.choice([-1, 1]) * random.randint(
            min_shift, max_shift
        ), random.choice([-1, 1]) * random.randint(min_shift, max_shift)

        # 7.5 --- –í–°–¢–ê–í–ö–ê ¬´–ú–û–ù–û–õ–ò–¢–ê¬ª –ë–ï–ó –ò–°–ö–ê–ñ–ï–ù–ò–ô
        effective_angle = ang_rect
        if w_rect < h_rect:
            mono_rot = mono.rotate(
                -effective_angle, expand=True, resample=Image.BICUBIC
            )
        else:
            mono_rot = mono.rotate(
                -effective_angle - 90, expand=True, resample=Image.BICUBIC
            )
        layer = Image.new("RGBA", res.size, (0, 0, 0, 0))
        paste_x, paste_y = int(cx + dx - mono_rot.width / 2), int(
            cy + dy - mono_rot.height / 2
        )
        layer.paste(mono_rot, (paste_x, paste_y), mono_rot)
        res = Image.alpha_composite(res, layer)

    # 7.6 --- –†–ê–ó–ú–´–¢–ò–ï –õ–ï–í–û–ô –ö–†–û–ú–ö–ò (–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º—É –∏—Ç–æ–≥–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é)
    if thickness > 0 and box_blur_radius > 0 and res.width >= thickness:
        strip = res.crop((0, 0, thickness, res.height))
        res.paste(strip.filter(ImageFilter.BoxBlur(box_blur_radius)), (0, 0))

    # 7.7 --- –ü–ê–ö–û–í–ö–ê
    png_bytes = _save_png(res)
    if len(png_bytes) <= TG_PHOTO_LIMIT:
        return png_bytes
    for q in (95, 90, 85, 80, 75, 70, 65):
        jpg_bytes = _save_jpeg(res, q)
        if len(jpg_bytes) <= TG_PHOTO_LIMIT:
            return jpg_bytes
    return _save_jpeg(res, 50)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∫ 8. –•–†–ê–ù–ò–õ–ò–©–ï –°–û–°–¢–û–Ø–ù–ò–ô
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
user_state: Dict[int, Dict[str, Any]] = {}


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∫ 9. –•–ï–ù–î–õ–ï–†–´ –ë–û–¢–ê
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def common_access_check(user_id: int, chat_id: int) -> bool:
    if user_id not in ALLOWED_USER_IDS:
        bot.send_message(chat_id, MSG_NO_ACCESS)
        return False
    return True


def common_access_check_callback(call) -> bool:
    if call.from_user.id not in ALLOWED_USER_IDS:
        bot.answer_callback_query(call.id, MSG_NO_ACCESS, show_alert=True)
        return False
    return True


def get_display_template_name(tpl_file_name: str, persona_name_str: str) -> str:
    base_name = get_template_name_without_extension(tpl_file_name)
    prefix_to_remove = f"{persona_name_str}_"
    display_name = (
        base_name[len(prefix_to_remove) :]
        if base_name.startswith(prefix_to_remove)
        else base_name
    )
    display_name = re.sub(r"_[0-9]+$", "", display_name)
    return display_name.capitalize()


def request_next_photo(chat_id: int, message_id: Optional[int] = None):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –≤—Å–µ —Å–æ–±—Ä–∞–Ω—ã."""
    state = user_state.get(chat_id)
    if not state or state.get("state") != "waiting_photos":
        return

    required = state.get("required_photos", 0)
    photos = state.get("photos", [])

    if len(photos) < required:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ
        msg = MSG_SEND_PHOTO.format(current_num=len(photos) + 1, total_num=required)
        if message_id:
            bot.edit_message_text(msg, chat_id, message_id)
        else:
            bot.send_message(chat_id, msg)
    else:
        # –í—Å–µ —Ñ–æ—Ç–æ —Å–æ–±—Ä–∞–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        processing_msg = bot.send_message(chat_id, MSG_PROCESSING)

        try:
            relative_tpl_path = state["template_file"]
            tpl_path = os.path.join(templates_dir, relative_tpl_path)

            template_img = Image.open(tpl_path)
            user_imgs = [Image.open(io.BytesIO(p_bytes)) for p_bytes in photos]

            result_bytes = process_template_with_multiple_photos(
                template_img, user_imgs
            )

            template_img.close()
            for img in user_imgs:
                img.close()

            logging.info(
                f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ | chat={chat_id} result_size={len(result_bytes)} bytes"
            )
            kb = InlineKeyboardMarkup().add(
                InlineKeyboardButton(BTN_REGENERATE, callback_data="start_over")
            )

            try:
                bot.delete_message(chat_id, processing_msg.message_id)
            except Exception:
                pass

            if len(result_bytes) <= TG_PHOTO_LIMIT:
                _safe_send(
                    bot.send_photo,
                    chat_id,
                    result_bytes,
                    caption=MSG_DONE,
                    reply_markup=kb,
                )
            else:
                fname = (
                    "result.png"
                    if result_bytes.startswith(b"\x89PNG")
                    else "result.jpg"
                )
                _safe_send(
                    bot.send_document,
                    chat_id,
                    (fname, result_bytes),
                    caption=MSG_DONE,
                    reply_markup=kb,
                )

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_state[chat_id] = {}

        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞ | chat={chat_id}")
            bot.send_message(chat_id, MSG_ERROR_INTERNAL)
            kb_error = InlineKeyboardMarkup().add(
                InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_over")
            )
            bot.send_message(
                chat_id, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=kb_error
            )


@bot.callback_query_handler(func=lambda c: c.data == "start_over")
def cb_start_again(call) -> None:
    if not common_access_check_callback(call):
        return
    bot.answer_callback_query(call.id)
    cmd_start(call.message, from_callback=True)


@bot.message_handler(commands=["start"])
def cmd_start(msg: Message, from_callback: bool = False) -> None:
    if not from_callback and not common_access_check(msg.from_user.id, msg.chat.id):
        return
    chat_id = msg.chat.id
    user_state[chat_id] = {}
    personas = get_personas()
    if not personas:
        bot.send_message(chat_id, "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    kb = InlineKeyboardMarkup()
    for p_name in personas:
        kb.add(InlineKeyboardButton(p_name, callback_data=f"persona_{p_name}"))

    if from_callback:
        try:
            bot.edit_message_text(
                MSG_SELECT_PERSONA, chat_id, msg.message_id, reply_markup=kb
            )
        except Exception as e:
            bot.send_message(chat_id, MSG_SELECT_PERSONA, reply_markup=kb)
    else:
        bot.send_message(chat_id, MSG_SELECT_PERSONA, reply_markup=kb)


def set_template_and_start_photo_collection(
    chat_id: int, message_id: int, template_relative_path: str
):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ.
    """
    full_tpl_path = os.path.join(templates_dir, template_relative_path)
    if not os.path.exists(full_tpl_path):
        bot.edit_message_text(MSG_TEMPLATE_NOT_FOUND, chat_id, message_id)
        return

    try:
        with Image.open(full_tpl_path) as tpl_img:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —Å–∫–æ–ª—å–∫–æ –æ–±–ª–∞—Å—Ç–µ–π –≤ —à–∞–±–ª–æ–Ω–µ
            num_areas = len(find_and_sort_green_areas(tpl_img))
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω {full_tpl_path}: {e}")
        bot.edit_message_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞.", chat_id, message_id
        )
        return

    if num_areas == 0:
        bot.edit_message_text(
            "–í —ç—Ç–æ–º —à–∞–±–ª–æ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏.", chat_id, message_id
        )
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state[chat_id]["template_file"] = template_relative_path
    user_state[chat_id]["state"] = "waiting_photos"  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_state[chat_id]["required_photos"] = num_areas
    user_state[chat_id]["photos"] = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–π—Ç–æ–≤ —Ñ–æ—Ç–æ

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
    request_next_photo(chat_id, message_id=message_id)


def _show_variant_options(
    chat_id: int, message_id: int, rel_dir: str, variants: Dict[int, str]
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ–∂–¥—É –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ _1/_2, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ."""
    kb = InlineKeyboardMarkup()
    for num, fname in sorted(variants.items()):
        label = f"{num} —Ñ–æ—Ç–æ" if num in (1, 2) else str(num)
        kb.add(InlineKeyboardButton(label, callback_data=f"template_{rel_dir}/{fname}"))
    bot.edit_message_text(MSG_SELECT_VARIANT, chat_id, message_id, reply_markup=kb)


def _handle_template_groups(
    chat_id: int,
    message_id: int,
    persona_name: str,
    stage_val: Optional[str],
    current_path: str,
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —à–∞–±–ª–æ–Ω–æ–≤ –∏ –≤—ã–≤–æ–¥ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    groups = group_templates_by_basename(current_path)
    if not groups:
        bot.edit_message_text(MSG_NO_TEMPLATES_FOUND, chat_id, message_id)
        return

    rel_dir = os.path.join(persona_name, stage_val) if stage_val else persona_name

    if len(groups) == 1:
        base, variants = next(iter(groups.items()))
        if len(variants) == 1:
            file = next(iter(variants.values()))
            template_path = os.path.join(rel_dir, file)
            set_template_and_start_photo_collection(chat_id, message_id, template_path)
        else:
            _show_variant_options(chat_id, message_id, rel_dir, variants)
    else:
        kb = InlineKeyboardMarkup()
        for base, variants in sorted(groups.items()):
            display_name = get_display_template_name(
                list(variants.values())[0], persona_name
            )
            kb.add(
                InlineKeyboardButton(
                    display_name, callback_data=f"tplgrp_{rel_dir}/{base}"
                )
            )
        bot.edit_message_text(MSG_SELECT_TEMPLATE, chat_id, message_id, reply_markup=kb)


@bot.callback_query_handler(func=lambda c: c.data.startswith("persona_"))
def cb_persona(call) -> None:
    if not common_access_check_callback(call):
        return
    chat_id = call.message.chat.id
    persona_name = call.data.split("_", 1)[1]
    user_state[chat_id] = {"persona": persona_name}
    bot.answer_callback_query(call.id)
    # ... (–ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —ç—Ç–∞–ø–∞ –∏–ª–∏ —à–∞–±–ª–æ–Ω–∞) ...
    # –≠—Ç–∞ —á–∞—Å—Ç—å –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—Ö–æ–∂–µ–π, –Ω–æ –≤ –∫–æ–Ω—Ü–µ –≤—ã–∑—ã–≤–∞–µ—Ç set_template_and_start_photo_collection
    persona_path = os.path.join(templates_dir, persona_name)
    stages = get_stages_for_persona(persona_name)

    if stages:
        kb = InlineKeyboardMarkup()
        for stage_val, stage_label in stages:
            kb.add(
                InlineKeyboardButton(stage_label, callback_data=f"stage_{stage_val}")
            )
        bot.edit_message_text(
            MSG_SELECT_STAGE, chat_id, call.message.message_id, reply_markup=kb
        )
    else:  # –ù–µ—Ç —ç—Ç–∞–ø–æ–≤, —Å—Ä–∞–∑—É —à–∞–±–ª–æ–Ω—ã
        _handle_template_groups(
            chat_id, call.message.message_id, persona_name, None, persona_path
        )


@bot.callback_query_handler(func=lambda c: c.data.startswith("stage_"))
def cb_stage(call) -> None:
    if not common_access_check_callback(call):
        return
    chat_id = call.message.chat.id
    stage_val = call.data.split("_", 1)[1]
    if "persona" not in user_state.get(chat_id, {}):
        cmd_start(call.message, from_callback=True)
        return
    user_state[chat_id]["stage"] = stage_val
    bot.answer_callback_query(call.id)
    persona_name = user_state[chat_id]["persona"]
    current_path = os.path.join(templates_dir, persona_name, stage_val)
    _handle_template_groups(
        chat_id, call.message.message_id, persona_name, stage_val, current_path
    )


@bot.callback_query_handler(func=lambda c: c.data.startswith("tplgrp_"))
def cb_template_group(call) -> None:
    if not common_access_check_callback(call):
        return
    chat_id = call.message.chat.id
    data = call.data.split("_", 1)[1]
    parts = data.split("/")
    base = parts[-1]
    rel_dir = "/".join(parts[:-1])
    persona_name = user_state.get(chat_id, {}).get("persona")
    if not persona_name:
        cmd_start(call.message, from_callback=True)
        return
    stage_val = user_state.get(chat_id, {}).get("stage") if len(parts) > 2 else None
    current_path = os.path.join(templates_dir, rel_dir)
    groups = group_templates_by_basename(current_path)
    variants = groups.get(base)
    bot.answer_callback_query(call.id)
    if not variants:
        bot.edit_message_text(MSG_TEMPLATE_NOT_FOUND, chat_id, call.message.message_id)
        return
    if len(variants) == 1:
        file = next(iter(variants.values()))
        template_path = os.path.join(rel_dir, file)
        set_template_and_start_photo_collection(
            chat_id, call.message.message_id, template_path
        )
    else:
        _show_variant_options(chat_id, call.message.message_id, rel_dir, variants)


@bot.callback_query_handler(func=lambda c: c.data.startswith("template_"))
def cb_template_selection(call) -> None:
    if not common_access_check_callback(call):
        return
    chat_id = call.message.chat.id
    template_relative_path = call.data.split("_", 1)[1]
    if "persona" not in user_state.get(chat_id, {}):
        cmd_start(call.message, from_callback=True)
        return
    bot.answer_callback_query(call.id)
    set_template_and_start_photo_collection(
        chat_id, call.message.message_id, template_relative_path
    )


@bot.message_handler(content_types=["photo", "document"])
def handle_media(msg: Message) -> None:
    chat_id = msg.chat.id
    if not common_access_check(msg.from_user.id, chat_id):
        return

    state = user_state.get(chat_id, {})
    if state.get("state") != "waiting_photos":
        bot.send_message(chat_id, MSG_START_FIRST)
        return

    try:
        if msg.content_type == "photo":
            file_id = msg.photo[-1].file_id
        elif (
            msg.document
            and msg.document.mime_type
            and msg.document.mime_type.startswith("image/")
        ):
            file_id = msg.document.file_id
        else:
            bot.reply_to(msg, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return

        file_info = bot.get_file(file_id)
        downloaded_file_bytes = bot.download_file(file_info.file_path)

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–π—Ç—ã —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_state[chat_id]["photos"].append(downloaded_file_bytes)
        logging.debug(
            f"–§–æ—Ç–æ {len(user_state[chat_id]['photos'])}/{user_state[chat_id]['required_photos']} –ø–æ–ª—É—á–µ–Ω–æ | chat={chat_id}"
        )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ
        try:
            bot.delete_message(chat_id, msg.message_id)
        except Exception:
            pass

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        request_next_photo(chat_id)

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞ | chat={chat_id}")
        bot.send_message(chat_id, MSG_ERROR_INTERNAL)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∫ 10. –¢–û–ß–ö–ê –í–•–û–î–ê
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    if not BOT_TOKEN:
        print("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        try:
            bot.remove_webhook()
            bot.infinity_polling(skip_pending=True)
        except Exception as e:
            logging.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞")
            sys.exit(1)
